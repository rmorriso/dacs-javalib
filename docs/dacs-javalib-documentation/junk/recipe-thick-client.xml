<sect1 id="sysdoc-sect-5">
<title>Recipe: Sample Thick Client</title>
<remark><emphasis>$Id: examples.xml 26 2005-10-17 16:43:43Z rmorriso $</emphasis></remark>
<para>
In this recipe we bring together several components of the
&DJL; in a sample application written in Swing.
The sample does nothing terribly useful in itself but serves as an example
of some basic patterns that may be used when developing thick client
applications.
</para>
<para>
The top of the GUI component hierarchy is DacsClientFrame which initializes
the application, presents the results of executing canned or custom
HTTP requests and acts as a dispatcher
for DacsLoginFrame, DacsNatFrame, and DacsUsernameFrame.
Check-boxes are provided to select CHECK_ONLY or CHECK_FAIL behavior
for request processing.
</para>
<figure id="sysdoc-fig-3">
<title>Sample Thick Client</title>
  <mediaobject>
    <imageobject>
      <imagedata  fileref="images/thick-client.png" format="PNG"/>
    </imageobject>
  </mediaobject>
</figure>
<para>
In the excerpt below, DacsClientFrame is initialized with a usercontext
and federation.
Subsequent user interactions are executed with respect to this environment.
</para>
<example width="60%">
<title>DirectClientFrame</title>
<programlisting>

  public DacsClientFrame(UserContext usercontext, Federation federation) 
  throws Exception {

    this.federation = federation;
    this.usercontext = usercontext;
    this.usercontext.setDacs902EventHandler(federation, new Event902Handler(this));
    this.usercontext.setDacs905EventHandler(federation, new Event905Handler(this));

       [ ... ]
  }
</programlisting>
</example>
<para>
Also of note is the association of two event handlers with usercontext: 
<function>Event902Handler</function> and
<function>Event905Handler</function>.
If Enable Event Handling is selected in the GUI DACS requests are
executed in CHECK_FAIL mode.
In this mode, a DACS 902 or 905 event generated by DacsMethod
results in a call-back to the respective handler.
The screen capture in Figure XXX shows login and notice acknowledgement
dialogs that implement
<ulink url="http://dacs.fedroot.com/docs/javalib/dacs-client/com/fedroot/dacs/util/Dacs902EventHandler.html">
Dacs902EventHandler
</ulink>
and
<ulink url="http://dacs.fedroot.com/docs/javalib/dacs-services/com/fedroot/dacs/util/Dacs905EventHandler.html">
Dacs905EventHandler
</ulink>
interfaces required by the call-back mechanism.
Event processing is defined in the <function>handleEvent()</function>
interface method excerpted below.
</para>
<example>
<title>Event902Handler</title>
<programlisting>

  int handleEvent(DacsContext dacscontext, DacsGetMethod dacsget, DacsAccess902Event event) {
    try {
      Federation federation = Federation.getInstance(dacscontext, event.getJurUri());
      DacsLoginDialog dialog = new DacsLoginDialog(this.parent, "DACS Login", federation, dacscontext);
      if(dialog.showDialog()){ // user login was successful
          dialog.dispose();
          dialog = null;
          // return the result of executing dacsget again in the modified context
          return dacscontext.executeMethod(dacsget, DACS.AcsCheck.check_fail, DACS.ReplyFormat.XMLSCHEMA);
      } else { // User selected cancel
          dialog.dispose();
          dialog = null;
          return DacsStatus.SC_DACS_ACCESS_DENIED;
      }
    } catch (Exception e) {
        return DacsStatus.SC_DACS_ACCESS_DENIED;
    }
  }
</programlisting>
</example>

<example>
<title>Event905Handler</title>
<programlisting>

  public int handleEvent(DacsContext dacscontext, DacsGetMethod dacsget, DacsAccess905Event event) {
      try {
        // execute DacsNoticePresentationService to get notices back for acceptance
        // then execute DacsNoticePresentationService to send user's acceptance and get NAT
        DacsNotices notices = new DacsNotices(dacscontext, event);
        DacsNoticePresentationDialog dialog = 
            new DacsNoticePresentationDialog(
                   this.parent, "DACS Notices Must Be Acknowledged", dacscontext, notices);
        if(dialog.showDialog()){ // user clicked ACCEPT                
            // send user accept response via DacsNoticeAckService
            if (notices.acceptNotices(dacscontext)) {
                dialog.dispose();
                dialog = null;
                // return the result of executing dacsget again in the modified context
                return dacscontext.executeMethod(dacsget, DACS.AcsCheck.check_fail, DACS.ReplyFormat.XMLSCHEMA);
            } else {
                // Notice acceptance failed
                return DacsStatus.SC_DACS_ACCESS_DENIED;
            }
        } else {
            // User declined or closed dialog without accepting
            dialog.dispose();
            dialog = null;
            return DacsStatus.SC_DACS_ACCESS_DENIED;
        }
      } catch (Exception e) {
        return DacsStatus.SC_DACS_ACCESS_DENIED;
      }
  }
</programlisting>
</example>
</sect1>

